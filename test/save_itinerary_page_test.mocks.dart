// Mocks generated by Mockito 5.4.5 from annotations
// in travel_planner_project/test/save_itinerary_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i7;
import 'package:travel_planner_project/database/attraction_dao.dart' as _i4;
import 'package:travel_planner_project/database/database.dart' as _i8;
import 'package:travel_planner_project/database/destination_dao.dart' as _i3;
import 'package:travel_planner_project/database/expense_dao.dart' as _i2;
import 'package:travel_planner_project/database/travel_details_dao.dart' as _i5;
import 'package:travel_planner_project/model/travel_details.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExpenseDao_0 extends _i1.SmartFake implements _i2.ExpenseDao {
  _FakeExpenseDao_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDestinationDao_1 extends _i1.SmartFake
    implements _i3.DestinationDao {
  _FakeDestinationDao_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAttractionDao_2 extends _i1.SmartFake implements _i4.AttractionDao {
  _FakeAttractionDao_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTravelDetailsDao_3 extends _i1.SmartFake
    implements _i5.TravelDetailsDao {
  _FakeTravelDetailsDao_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_4<T> extends _i1.SmartFake
    implements _i6.StreamController<T> {
  _FakeStreamController_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseExecutor_5 extends _i1.SmartFake
    implements _i7.DatabaseExecutor {
  _FakeDatabaseExecutor_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i8.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExpenseDao get expenseDao => (super.noSuchMethod(
        Invocation.getter(#expenseDao),
        returnValue: _FakeExpenseDao_0(
          this,
          Invocation.getter(#expenseDao),
        ),
      ) as _i2.ExpenseDao);

  @override
  _i3.DestinationDao get destinationDao => (super.noSuchMethod(
        Invocation.getter(#destinationDao),
        returnValue: _FakeDestinationDao_1(
          this,
          Invocation.getter(#destinationDao),
        ),
      ) as _i3.DestinationDao);

  @override
  _i4.AttractionDao get attractionDao => (super.noSuchMethod(
        Invocation.getter(#attractionDao),
        returnValue: _FakeAttractionDao_2(
          this,
          Invocation.getter(#attractionDao),
        ),
      ) as _i4.AttractionDao);

  @override
  _i5.TravelDetailsDao get travelDetailsDao => (super.noSuchMethod(
        Invocation.getter(#travelDetailsDao),
        returnValue: _FakeTravelDetailsDao_3(
          this,
          Invocation.getter(#travelDetailsDao),
        ),
      ) as _i5.TravelDetailsDao);

  @override
  _i6.StreamController<String> get changeListener => (super.noSuchMethod(
        Invocation.getter(#changeListener),
        returnValue: _FakeStreamController_4<String>(
          this,
          Invocation.getter(#changeListener),
        ),
      ) as _i6.StreamController<String>);

  @override
  set changeListener(_i6.StreamController<String>? _changeListener) =>
      super.noSuchMethod(
        Invocation.setter(
          #changeListener,
          _changeListener,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.DatabaseExecutor get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseExecutor_5(
          this,
          Invocation.getter(#database),
        ),
      ) as _i7.DatabaseExecutor);

  @override
  set database(_i7.DatabaseExecutor? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [TravelDetailsDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockTravelDetailsDao extends _i1.Mock implements _i5.TravelDetailsDao {
  MockTravelDetailsDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> insertTravelDetail(_i9.TravelDetails? travelDetail) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTravelDetail,
          [travelDetail],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateTravelDetail(_i9.TravelDetails? travelDetail) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTravelDetail,
          [travelDetail],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteTravelDetail(String? name) => (super.noSuchMethod(
        Invocation.method(
          #deleteTravelDetail,
          [name],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i9.TravelDetails?> getTravelDetailByName(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTravelDetailByName,
          [name],
        ),
        returnValue: _i6.Future<_i9.TravelDetails?>.value(),
      ) as _i6.Future<_i9.TravelDetails?>);

  @override
  _i6.Future<List<_i9.TravelDetails>> getAllTravelDetails() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTravelDetails,
          [],
        ),
        returnValue:
            _i6.Future<List<_i9.TravelDetails>>.value(<_i9.TravelDetails>[]),
      ) as _i6.Future<List<_i9.TravelDetails>>);

  @override
  _i6.Future<_i9.TravelDetails?> getTravelDetailById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTravelDetailById,
          [id],
        ),
        returnValue: _i6.Future<_i9.TravelDetails?>.value(),
      ) as _i6.Future<_i9.TravelDetails?>);
}
